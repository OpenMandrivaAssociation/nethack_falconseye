--- ./src/files.c.gege	Thu May 24 23:34:50 2001
+++ ./src/files.c	Thu Jun 14 17:13:52 2001
@@ -1561,8 +1561,8 @@
 	    (void) chmod(fq_record, FCMASK | 007);
 # endif /* VMS && !SECURE */
 	} else {
-	    raw_printf("Warning: cannot write scoreboard file %s", fq_record);
-	    wait_synch();
+	  //	    raw_printf("Warning: cannot write scoreboard file %s", fq_record);
+	  //	    wait_synch();
 	}
 #endif  /* !UNIX && !VMS */
 #ifdef MICRO
--- ./sys/unix/unixunix.c.gege	Thu May 24 23:54:00 2001
+++ ./sys/unix/unixunix.c	Thu Jun 14 17:09:34 2001
@@ -176,6 +176,8 @@
 	register int i = 0, fd, c;
 	const char *fq_lock;
 
+	return;
+
         /* printf("DEBUG[unixunix.c/1] Starting getlock...\n"); */
 #ifdef TTY_GRAPHICS
 	/* idea from rpick%ucqais@uccba.uc.edu
--- ./win/jtp/jtp_sdl.c.gege	Sat May 26 19:01:38 2001
+++ ./win/jtp/jtp_sdl.c	Thu Jun 14 16:54:33 2001
@@ -568,22 +568,23 @@
       jtp_SDLWriteLogMessage(JTP_SDL_LOG_ERROR, "[SDL Error] ");
       jtp_SDLWriteLogMessage(JTP_SDL_LOG_ERROR, SDL_GetError());
       jtp_SDLWriteLogMessage(JTP_SDL_LOG_ERROR, "\n");
-      exit(1);
-    }
-    jtp_sdl_audio_chunk = (Uint8 *)malloc(JTP_SDL_SOUND_BUFFER_SIZE*sizeof(Uint8));
-    jtp_sdl_audio_len = 30000;
-    jtp_sdl_audio_pos = NULL;
+      jtp_play_effects = jtp_play_music = 0;
+    } else {
+      jtp_sdl_audio_chunk = (Uint8 *)malloc(JTP_SDL_SOUND_BUFFER_SIZE*sizeof(Uint8));
+      jtp_sdl_audio_len = 30000;
+      jtp_sdl_audio_pos = NULL;
+      
+      /* Create the sound cache */
+      jtp_sdl_cached_sounds = (jtp_sdl_cached_sound *)malloc(JTP_SDL_MAX_CACHED_SOUNDS*sizeof(jtp_sdl_cached_sound));
+      for (i = 0; i < JTP_SDL_MAX_CACHED_SOUNDS; i++)
+	{
+	  jtp_sdl_cached_sounds[i].length = 0;
+	  jtp_sdl_cached_sounds[i].samples = NULL;
+	  jtp_sdl_cached_sounds[i].filename = NULL;
+	}
 
-    /* Create the sound cache */
-    jtp_sdl_cached_sounds = (jtp_sdl_cached_sound *)malloc(JTP_SDL_MAX_CACHED_SOUNDS*sizeof(jtp_sdl_cached_sound));
-    for (i = 0; i < JTP_SDL_MAX_CACHED_SOUNDS; i++)
-    {
-      jtp_sdl_cached_sounds[i].length = 0;
-      jtp_sdl_cached_sounds[i].samples = NULL;
-      jtp_sdl_cached_sounds[i].filename = NULL;
+      /* SDL_PauseAudio(0); */ /* Start playing sounds */
     }
-
-    /* SDL_PauseAudio(0); */ /* Start playing sounds */
   }
 
   if (jtp_play_music)
--- ./win/jtp/jtp_gen.c.gege	Thu May 24 13:59:22 2001
+++ ./win/jtp/jtp_gen.c	Thu Jun 14 17:18:25 2001
@@ -17,7 +17,7 @@
 #endif
 #include "jtp_gen.h"
 
-#define JTP_LOG_FILENAME "jtp_log.txt"
+#define JTP_LOG_FILENAME "/tmp/jtp_log.txt"
 
 /*--------------------------------------------------------------------------
  General functions
--- ./sys/unix/Makefile.src.gege	Thu May 24 16:07:26 2001
+++ ./sys/unix/Makefile.src	Thu Jun 14 17:39:05 2001
@@ -117,8 +117,8 @@
 
 # flags for Linux
 #   compile normally
-CFLAGS = -O2 -fomit-frame-pointer -I../include -I/usr/X11/include
-LFLAGS = -L/usr/X11/lib
+# CFLAGS = -O2 -fomit-frame-pointer -I../include -I/usr/X11/include
+# LFLAGS = -L/usr/X11R6/lib
 #   OR compile backwards compatible a.out format
 # CFLAGS = -O2 -b i486-linuxaout -fomit-frame-pointer -I../include -I/usr/X11/include
 # LFLAGS = -b i486-linuxaout -L/usr/X11/lib
@@ -139,7 +139,7 @@
 # directories.  The ones given below is the usual spot for linux systems.
 # The paths are for glibconfig.h and gnomesupport.h respectively.
 #
-GNOMEINC=-I/usr/lib/glib/include -I/usr/lib/gnome-libs/include -I../win/gnome
+GNOMEINC = `gnome-config gnomeui --cflags`
 
 # Only used for the Falcon's Eye interface.
 # When including the Falcon's Eye interface, you need to include the SDL
@@ -217,8 +217,8 @@
 
 #
 #
-WINSRC = $(WINTTYSRC) $(WINJTPSRC)
-WINOBJ = $(WINTTYOBJ) $(WINJTPOBJ)
+WINSRC = $(WINTTYSRC) $(WINJTPSRC) $(WINX11SRC)
+WINOBJ = $(WINTTYOBJ) $(WINJTPOBJ) $(WINX11OBJ)
 
 # on some systems the termcap library is in -ltermcap or -lcurses
 # on 386 Xenix, the -ltermlib tputs() seems not to work; use -lcurses instead
@@ -263,7 +263,7 @@
 # libraries for BeOS 
 WINBELIB = -lbe
 
-WINLIB = $(WINTTYLIB) $(WINJTPLIB)
+WINLIB = $(WINTTYLIB) $(WINJTPLIB) $(WINX11LIB)
 
 # any other strange libraries your system needs (for Sysunix only -- the more
 # specialized targets should already be right)
@@ -396,8 +396,7 @@
 	@echo "$(GAME) is up to date."
 
 Sysunix:	$(HOBJ) Makefile
-	@echo "Loading ..."
-	@$(CC) $(LFLAGS) -o $(GAME) $(HOBJ) $(WINLIB) $(LIBS)
+	$(CC) $(LFLAGS) -o $(GAME) $(HOBJ) $(WINLIB) $(LIBS)
 	@touch Sysunix
 
 Sys3B2:	$(HOBJ) Makefile
--- ./include/global.h.gege	Tue May 15 23:08:18 2001
+++ ./include/global.h	Fri Jun 15 15:43:45 2001
@@ -14,7 +14,7 @@
  * Files expected to exist in the playground directory.
  */
 
-#define RECORD	      "record"	/* file containing list of topscorers */
+#define RECORD	      "/var/lib/games/nethack.record"	/* file containing list of topscorers */
 #define HELP	      "help"	/* file containing command descriptions */
 #define SHELP	      "hh"	/* abbreviated form of the same */
 #define DEBUGHELP     "wizhelp" /* file containing debug mode cmds */
--- ./include/config.h.gege	Fri May 18 07:48:06 2001
+++ ./include/config.h	Fri Jun 15 15:45:05 2001
@@ -150,7 +150,7 @@
 # endif
 #endif
 
-#define LOGFILE "logfile"	/* larger file for debugging purposes */
+#define LOGFILE "/tmp/nethack.logfile"	/* larger file for debugging purposes */
 #define NEWS "news"		/* the file containing the latest hack news */
 
 /*
--- ./src/files.c.gege	Sun Jun 24 16:57:14 2001
+++ ./src/files.c	Mon Jun 25 00:21:58 2001
@@ -5,6 +5,9 @@
 #include "hack.h"
 #include "dlb.h"
 
+#include <sys/stat.h>
+#include <sys/types.h>
+
 #include <ctype.h>
 
 #if !defined(MAC) && !defined(O_WRONLY) && !defined(AZTEC_C)
@@ -66,7 +69,7 @@
 # endif
 #endif
 
-char SAVEF[SAVESIZE];	/* holds relative path of save file from playground */
+char SAVEF[SAVESIZE+50];	/* holds relative path of save file from playground */
 #ifdef MICRO
 char SAVEP[SAVESIZE];	/* holds path of directory for save file */
 #endif
@@ -197,6 +200,21 @@
 #endif /* MFLOPPY */
 
 
+char * get_rc_directory(void)
+{
+  static char plop[100];
+  sprintf(plop, "%s/%s", getenv("HOME"), ".nethackrcdir");
+  {
+    mode_t mode;
+    mode = umask(0);	/* Get current umask.  */
+    umask(0);
+    mkdir(plop, 0755);
+    umask(mode);
+  }
+  return plop;
+}
+
+
 /* Construct a file name for a level-type file, which is of the form
  * something.level (with any old level stripped off).
  * This assumes there is space on the end of 'file' to append
@@ -208,14 +226,8 @@
 char *file;
 int lev;
 {
-	char *tf;
+	Sprintf(file, "%s/levelfile%d", get_rc_directory(), lev);
 
-	tf = rindex(file, '.');
-	if (!tf) tf = eos(file);
-	Sprintf(tf, ".%d", lev);
-#ifdef VMS
-	Strcat(tf, ";1");
-#endif
 	return;
 }
 
@@ -514,15 +526,15 @@
 #  else
 		(void)strncat(SAVEF, plname, 8);
 #  endif
-		regularize(SAVEF+i);
+		//		regularize(SAVEF+i);
 	}
 	Strcat(SAVEF, ".sav");
 # else
 #  if defined(WIN32)
 	Sprintf(SAVEF,"%s-%s.NetHack-saved-game",get_username(0), plname);
 #  else
-	Sprintf(SAVEF, "save/%d%s", (int)getuid(), plname);
-	regularize(SAVEF+5);	/* avoid . or / in name */
+	Sprintf(SAVEF, "%s/save%d%s", get_rc_directory(), (int)getuid(), plname);
+	//	regularize(SAVEF+5);	/* avoid . or / in name */
 #  endif /* WIN32 */
 # endif	/* MICRO */
 #endif /* VMS   */
@@ -656,6 +668,7 @@
 	    (void) close(fd),  fd = -1;
 	    (void) delete_savefile();
 	}
+
 	return fd;
 }
 
@@ -803,7 +816,7 @@
 # pragma unused(filename)
 #endif
 #else
-	docompress_file(filename, FALSE);
+  //	docompress_file(filename, FALSE);
 #endif
 }
 
@@ -818,7 +831,7 @@
 # pragma unused(filename)
 #endif
 #else
-	docompress_file(filename, TRUE);
+  //	docompress_file(filename, TRUE);
 #endif
 }
 
--- ./src/save.c.gege	Tue May 15 23:10:54 2001
+++ ./src/save.c	Mon Jun 25 00:19:49 2001
@@ -316,6 +316,8 @@
 	int fd, hpid;
 	static boolean havestate = TRUE;
 
+	return; // This is called and the 0th level is not found, making all fail; when INSURACE is unset, everything segfaults, e.g. not better
+
 	/* When checkpointing is on, the full state needs to be written
 	 * on each checkpoint.  When checkpointing is off, only the pid
 	 * needs to be in the level.0 file, so it does not need to be
--- ./sys/unix/unixmain.c.gege	Thu May 24 23:50:48 2001
+++ ./sys/unix/unixmain.c	Mon Jun 25 00:18:37 2001
@@ -44,6 +44,8 @@
 static boolean wiz_error_flag = FALSE;
 #endif
 
+void jtp_restore_game_palette(void);
+
 int
 main(argc,argv)
 int argc;
@@ -259,6 +261,7 @@
 		}
 #endif
 		pline("Restoring save file...");
+		jtp_restore_game_palette(); // (gc) uglyest hack on earth? :-(
 		mark_synch();	/* flush output */
 		if(!dorecover(fd))
 			goto not_recovered;
--- ./win/jtp/jtp_win.c.gege	Sun Jun 24 16:57:14 2001
+++ ./win/jtp/jtp_win.c	Mon Jun 25 00:12:24 2001
@@ -5633,6 +5633,15 @@
 /*  jtp_display_nhwindow(BASE_WINDOW, FALSE);  */
 }
 
+void jtp_restore_game_palette(void)
+{
+  /* Restore regular game palette */  
+  jtp_load_PCX(0, 0, jtp_filenames[JTP_FILE_MOUSE_CURSORS], 1);
+  jtp_clear_screen();
+  jtp_refresh();
+  jtp_updatepal(0, 255);
+}
+
 int jtp_construct_shortcut_action
 (
   int tgtx, int tgty, /* Target square, or item accelerator in tgtx */
